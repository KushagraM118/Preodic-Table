import sys
import csv
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QGridLayout,
    QPushButton, QLabel, QDialog, QVBoxLayout
)
from PyQt5.QtGui import QPixmap, QPalette, QBrush
from PyQt5.QtCore import Qt

def get_color(type_name):
    type_colors = {
        "noble gas": "darkorange",
        "halogen": "yellow",
        "nonmetal": "blue",
        "alkali metal": "pink",
        "alkaline earth metal": "magenta",
        "transition metal": "lightskyblue",
        "transactinide":"lightskyblue",
        "post-transition metal": "orange",
        "metalloid": "green",
        "lanthanide": "lightyellow",
        "actinide": "red",
    }

    normalized_type = type_name.strip().lower()  # remove extra spaces and make lowercase
    return type_colors.get(normalized_type, "gray")


def load_elements_from_csv(filepath):
    elements_list = []
    with open(filepath, newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            try:
                Type1=row["Type"]
                symbol = row["Symbol"]
                atomic_number = int(row["Atomic_Number"])
                name = row["Name"]
                row_num = int(float(row["Graph.Period"]))
                col_num = int(float(row["Graph.Group"]))
                color = get_color(Type1)
                elements_list.append([row_num, col_num, symbol, atomic_number, name, color])
            except (ValueError, KeyError):
                continue
    return elements_list

# CSV path
elements = load_elements_from_csv('C:/Users/Admin/Desktop/test2/elementdatavalues.csv')
class ElementDetailDialog(QDialog):
    def __init__(self, name, symbol, atomic_number, color):
        super().__init__()
        self.setWindowTitle(f"Details of {name}")
        self.setFixedSize(300, 200)

        layout = QVBoxLayout()

        name_label = QLabel(f"<b>Name:</b> {name}")
        symbol_label = QLabel(f"<b>Symbol:</b> {symbol}")
        atomic_label = QLabel(f"<b>Atomic Number:</b> {atomic_number}")
        color_label = QLabel(f"<b>Color:</b> {color}")

        name_label.setAlignment(Qt.AlignCenter)
        symbol_label.setAlignment(Qt.AlignCenter)
        atomic_label.setAlignment(Qt.AlignCenter)
        color_label.setAlignment(Qt.AlignCenter)

        layout.addWidget(name_label)
        layout.addWidget(symbol_label)
        layout.addWidget(atomic_label)
        layout.addWidget(color_label)

        self.setLayout(layout)

class PeriodicTable(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Periodic Table")
        self.setStyleSheet("background-color: black;")
        self.setStyleSheet("background-image: url('C:/Users/Desktop/test2/pexels-eberhardgross-443446'); background-position: center; background-repeat: no-repeat; background-attachment: fixed;")
        self.setFixedSize(1360, 700)
        self.background_image = QPixmap("C:/Users/Admin/Desktop/test2/pexels-eberhardgross-443446.jpg")
        self.update_background()

        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.grid_layout = QGridLayout(self.central_widget)
        self.grid_layout.setSpacing(5)

        self.create_elements()
       

    def create_elements(self):
        for element in elements:
            row, col, symbol, atomic_number, name, color = element
            btn = QPushButton(f"{symbol}\n{atomic_number}")
            btn.setFixedSize(77, 77)
            btn.setStyleSheet(f"background-color: {color}; color: black; border: 2px solid black;")
            btn.setToolTip(f"{name} (Atomic Number: {atomic_number})")

            btn.clicked.connect(self.create_button_handler(name, symbol, atomic_number, color))
            btn.enterEvent = lambda event, b=btn, c=color: self.on_hover(event, b, "OrangeRed3")
            btn.leaveEvent = lambda event, b=btn, c=color: self.off_hover(event, b, c)
            
            self.grid_layout.addWidget(btn, row, col, alignment=Qt.AlignCenter)
    def create_button_handler(self, name, symbol, atomic_number, color):
        return lambda: self.show_element_details(name, symbol, atomic_number, color)

    def show_element_details(self, name, symbol, atomic_number, color):
        dialog = ElementDetailDialog(name, symbol, atomic_number, color)
        dialog.exec_()
        
    def on_hover(self, event, button, color):
        button.setStyleSheet(f"background-color: {color}; color: white; border: 2px solid black;")
        button.raise_()  # Bring the button to the top layer
        button.setFixedSize(90, 90)  # Enlarge the button

    def off_hover(self, event, button, color):
        button.setStyleSheet(f"background-color: {color}; color: black; border: 2px solid black;")
        button.setFixedSize(77, 77)  # Restore original size
    def update_background(self):
        if not self.background_image.isNull():
            scaled_image = self.background_image.scaled(self.size(), Qt.IgnoreAspectRatio, Qt.SmoothTransformation)
            palette = QPalette()
            palette.setBrush(QPalette.Window, QBrush(scaled_image))
            self.setPalette(palette)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = PeriodicTable()
    window.show()
    sys.exit(app.exec_())
